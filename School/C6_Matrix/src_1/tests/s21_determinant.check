#suite determinant

#test determinant1
// Checking matrix with same number in rows and columns
const int rows = rand() % 100 + 1;
matrix_t test = {0};
double check = 0;
double total = 0;
s21_create_matrix(rows, rows, &test);
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < rows; j++) {
        test.matrix[i][j] = 1;
    }
}
ck_assert_int_eq(s21_determinant(&test, &check), OK);
ck_assert_double_eq_tol(total, check, FRACTURE_CHECK);
s21_remove_matrix(&test);

#test determinant2
// Check unit matrix
const int rows = rand() % 100 + 1;
matrix_t test = {0};
double check = 0;
double total = 1;
s21_create_matrix(rows, rows, &test);
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < rows; j++) {
        test.matrix[i][j] = 0;
        test.matrix[i][i] = 1;
    }
}
ck_assert_int_eq(s21_determinant(&test, &check), OK);
ck_assert_double_eq_tol(total, check, FRACTURE_CHECK);
s21_remove_matrix(&test);

#test determinant3
// Check random matrix
const int rows = 4;
matrix_t test = {0};
double check = 0;
double total = 16654.35;
s21_create_matrix(rows, rows, &test);
test.matrix[0][0] = 4.5;
test.matrix[0][1] = 3;
test.matrix[0][2] = 32;
test.matrix[0][3] = 11;
test.matrix[1][0] = 0.1;
test.matrix[1][1] = 3;
test.matrix[1][2] = -5;
test.matrix[1][3] = 12;
test.matrix[2][0] = 1;
test.matrix[2][1] = 8.9;
test.matrix[2][2] = 4;
test.matrix[2][3] = 7;
test.matrix[3][0] = -5;
test.matrix[3][1] = 3;
test.matrix[3][2] = 2;
test.matrix[3][3] = 1;
ck_assert_int_eq(s21_determinant(&test, &check), OK);
ck_assert_double_eq_tol(total, check, FRACTURE_CHECK);
s21_remove_matrix(&test);

#test determinant4
// Result is NULL
const int rows = rand() % 100 + 1;
matrix_t test = {0};
s21_create_matrix(rows, rows, &test);
ck_assert_int_eq(s21_determinant(&test, NULL), ERROR);
s21_remove_matrix(&test);

#test determinant5
// Set matrix is NULL
double check = 0;
ck_assert_int_eq(s21_determinant(NULL, &check), ERROR);

#test determinant6
// The matrix isn't square
const int rows = 4;
const int columns = 5;
matrix_t test = {0};
double check = 0;
s21_create_matrix(rows, columns, &test);
ck_assert_int_eq(s21_determinant(&test, &check), CALC_ERROR);
s21_remove_matrix(&test);

#test determinant7
// Check matrix reduction
matrix_t test = {0};
matrix_t total = {0};
matrix_t check = {0};
s21_create_matrix(4, 4, &test);
s21_create_matrix(3, 3, &total);
int num = 1;
for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
        test.matrix[i][j] = num;
        num += 1;
    }
}
total.matrix[0][0] = 6;
total.matrix[0][1] = 7;
total.matrix[0][2] = 8;
total.matrix[1][0] = 10;
total.matrix[1][1] = 11;
total.matrix[1][2] = 12;
total.matrix[2][0] = 14;
total.matrix[2][1] = 15;
total.matrix[2][2] = 16;
matrix_reduction(&test, &check, 0, 0);
ck_assert_int_eq(s21_eq_matrix(&check, &total), SUCCESS);
s21_remove_matrix(&test);
s21_remove_matrix(&check);
s21_remove_matrix(&total);
